# name: Deployment CI/CD
# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]
#
# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [22.x]
#     env:
#       NPM_CONFIG_FUND: false # Disable npm fund messages
#     steps:
#       # Checkout the repository
#       - name: Checkout code
#         uses: actions/checkout@v4
#
#       # Set up Node.js environment
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: "npm"
#
#       # Install dependencies and build
#       - name: Install dependencies
#         run: npm ci --omit=dev # Use --omit=dev for production dependencies
#
#       - name: Build Next.js app
#         run: npm run build
#
#       # Verify build
#       - name: Verify build
#         run: |
#           if [ ! -d ".next" ]; then
#             echo "Build failed: .next directory not found!"
#             exit 1
#           fi
#
#       # Upload build artifacts
#       - name: Upload build artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: build-files
#           path: |
#             .next/
#             package.json
#             package-lock.json
#             public/
#             next.config.js
#           retention-days: 1
#
#       # Test SSH connection
#       - name: Test SSH Connection
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_SSH_KEY }}
#           port: ${{ secrets.SERVER_PORT || '22' }}
#           script: |
#             echo "SSH connection successful"
#
#       # Prepare deployment directory with safe rollback
#       - name: Prepare deployment directory
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_SSH_KEY }}
#           port: ${{ secrets.SERVER_PORT || '22' }}
#           script: |
#             set -e
#             echo "Preparing deployment directory..."
#             # Create directories
#             sudo mkdir -p /var/www/4BlocksRoadmap
#             # If there's a current deployment, keep it as previous for potential rollback
#             if [ -d "/var/www/4BlocksRoadmap/current" ]; then
#               echo "Preserving current version for potential rollback..."
#               sudo rm -rf /var/www/4BlocksRoadmap/previous
#               sudo mv /var/www/4BlocksRoadmap/current /var/www/4BlocksRoadmap/previous
#             fi
#             # Create new deployment directory
#             sudo mkdir -p /var/www/4BlocksRoadmap/current
#             # Set ownership
#             sudo chown -R $USER:$USER /var/www/4BlocksRoadmap
#
#       # Transfer files to server
#       - name: Transfer files
#         uses: appleboy/scp-action@v0.1.7
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_SSH_KEY }}
#           port: ${{ secrets.SERVER_PORT || '22' }}
#           source: ./.next,./package.json,./package-lock.json,./public,./next.config.js
#           target: /var/www/4BlocksRoadmap/current
#           strip_components: 1
#           overwrite: true
#
#       # Deploy and start app
#       - name: Deploy and start app
#         uses: appleboy/ssh-action@v1.0.3
#         env:
#           BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SERVER_SSH_KEY }}
#           port: ${{ secrets.SERVER_PORT || '22' }}
#           envs: BREVO_API_KEY
#           script: |
#             set -e
#             echo "Deploying application..."
#             # Ensure Node.js is installed (install 22.x if missing)
#             if ! command -v node &> /dev/null; then
#               echo "Node.js not found. Installing Node.js 22.x..."
#               curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
#               sudo apt-get install -y nodejs
#             fi
#             node -v || true
#             npm -v || true
#             # Navigate to deployment directory
#             cd /var/www/4BlocksRoadmap/current
#             # Verify required build files exist
#             if [ ! -d ".next" ]; then echo ".next folder missing on server"; ls -la; exit 1; fi
#             if [ ! -f "package.json" ]; then echo "package.json missing on server"; exit 1; fi
#             if [ ! -d "public" ]; then echo "public folder missing on server"; exit 1; fi
#             # Write runtime environment file with secrets (from step env)
#             echo "Writing .env with BREVO_API_KEY..."
#             if [ -z "$BREVO_API_KEY" ]; then
#               echo "BREVO_API_KEY is empty or not set in secrets" >&2
#               exit 1
#             fi
#             printf "BREVO_API_KEY=%s\n" "$BREVO_API_KEY" | sudo tee /var/www/4BlocksRoadmap/current/.env > /dev/null
#             # Restrict permissions on the .env file
#             sudo chmod 600 /var/www/4BlocksRoadmap/current/.env
#             # Basic sanity check without leaking secret
#             echo ".env created:"; sudo ls -l /var/www/4BlocksRoadmap/current/.env
#             echo "Line count (should be 1):"; sudo sh -c 'wc -l /var/www/4BlocksRoadmap/current/.env'
#             # Install dependencies
#             npm ci --omit=dev
#             npm audit fix || true # Address vulnerabilities
#             # Install PM2 if not present
#             if ! command -v pm2 &> /dev/null; then
#               npm install -g pm2
#             fi
#             export PATH=$HOME/.npm-global/bin:$PATH
#             # Set permissions
#             sudo chown -R www-data:www-data /var/www/4BlocksRoadmap/current
#             # Ensure the PM2 user can read .env (Next.js reads it on start)
#             sudo chown $USER:$USER /var/www/4BlocksRoadmap/current/.env
#             sudo chmod -R 755 /var/www/4BlocksRoadmap/current
#             # Ensure we're in the correct directory
#             cd /var/www/4BlocksRoadmap/current || {
#               echo "Failed to change to application directory"
#               exit 1
#             }
#
#             # Reset PM2 if it's in a bad state
#             if ! pm2 list > /dev/null 2>&1; then
#               echo "PM2 appears to be in a bad state, resetting..."
#               pm2 delete all || true
#               pm2 flush
#               rm -rf ~/.pm2
#               pm2 update
#             fi
#
#             # Stop any existing process
#             if pm2 list | grep -q 'mvp-roadmap'; then
#               echo "Found existing mvp-roadmap process, stopping gracefully..."
#               pm2 stop mvp-roadmap || true
#               pm2 delete mvp-roadmap || true
#             fi
#
#             # Clear any lingering PM2 state
#             pm2 flush
#
#             # Ensure correct permissions
#             sudo chown -R www-data:www-data /var/www/4BlocksRoadmap/current
#             sudo chmod -R 755 /var/www/4BlocksRoadmap/current
#             # Load .env into this shell so PM2 child inherits runtime env
#             set -a
#             . /var/www/4BlocksRoadmap/current/.env
#             set +a
#             # Verify runtime env is loaded (do not print the value)
#             if [ -z "$BREVO_API_KEY" ]; then
#               echo "Runtime env missing BREVO_API_KEY after sourcing .env" >&2
#               exit 1
#             fi
#             # Start app in production mode with robust error handling
#             echo "Starting application in production mode..."
#             NODE_ENV=production pm2 start npm --name "mvp-roadmap" \
#               --env production \
#               --wait-ready \
#               --listen-timeout 30000 \
#               --time \
#               --max-memory-restart 500M \
#               --restart-delay 5000 \
#               --max-restarts 5 \
#               -- run start -- -p 3002
#
#             # Ensure PM2 state is saved
#             pm2 save
#
#             # Verify the process is running
#             sleep 5
#             if ! pm2 list | grep -q 'mvp-roadmap.*online'; then
#               echo "Process failed to start properly"
#               pm2 logs mvp-roadmap --lines 50
#               exit 1
#             fi
#
#             # Additional health check
#             for i in {1..6}; do
#               if curl -s -f http://localhost:3002 > /dev/null; then
#                 echo "Application is responding on port 3002"
#                 break
#               fi
#               if [ $i -eq 6 ]; then
#                 echo "Application failed to respond after 30 seconds"
#                 pm2 logs mvp-roadmap --lines 50
#                 exit 1
#               fi
#               echo "Waiting for application to respond... attempt $i/6"
#               sleep 5
#             done
#             # Verify process
#             sleep 3
#             if ! pm2 list | grep -q 'mvp-roadmap.*online'; then
#               echo "Frontend process failed to start"
#               pm2 logs mvp-roadmap --lines 10
#               echo "Rolling back to previous version..."
#               perform_rollback
#               exit 1
#             fi
#
#             # Function to handle rollback
#             perform_rollback() {
#               echo "Performing rollback to previous version..."
#               if [ -d "/var/www/4BlocksRoadmap/previous" ]; then
#                 # Stop current failed deployment
#                 pm2 stop mvp-roadmap || true
#                 pm2 delete mvp-roadmap || true
#                 # Restore previous version
#                 sudo rm -rf /var/www/4BlocksRoadmap/current
#                 sudo mv /var/www/4BlocksRoadmap/previous /var/www/4BlocksRoadmap/current
#                 # Start previous version
#                 cd /var/www/4BlocksRoadmap/current
#                 NODE_ENV=production pm2 start npm --name "mvp-roadmap" -- run start -- -p 3002
#                 echo "Rollback completed - previous version restored"
#               else
#                 echo "No previous version available for rollback"
#               fi
#             }
#
#             # Save PM2 configuration
#             pm2 save
#             pm2 startup systemd -u $USER --hp $HOME
#
#             # Health check with rollback
#             for i in {1..15}; do
#               if curl -f http://localhost:3002 >/dev/null 2>&1; then
#                 echo "Application is responding on port 3002"
#                 # Cleanup previous version after successful deployment
#                 sudo rm -rf /var/www/4BlocksRoadmap/previous
#                 break
#               fi
#               if [ $i -eq 15 ]; then
#                 echo "Health check failed after 15 attempts"
#                 pm2 logs roadmap --lines 20
#                 perform_rollback
#                 exit 1
#               fi
#               echo "Waiting for application... attempt $i/15"
#               sleep 2
#             done
#             echo "Deployment completed successfully"
